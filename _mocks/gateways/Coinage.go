package mocks

import gateways "github.com/ghmeier/coinage/gateways"
import mock "github.com/stretchr/testify/mock"
import models "github.com/ghmeier/coinage/models"
import uuid "github.com/pborman/uuid"

// Coinage is an autogenerated mock type for the Coinage type
type Coinage struct {
	mock.Mock
}

// Customer provides a mock function with given fields: _a0
func (_m *Coinage) Customer(_a0 uuid.UUID) (*models.Customer, error) {
	ret := _m.Called(_a0)

	var r0 *models.Customer
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Customer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Customers provides a mock function with given fields: _a0, _a1
func (_m *Coinage) Customers(_a0 int, _a1 int) ([]*models.Customer, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*models.Customer
	if rf, ok := ret.Get(0).(func(int, int) []*models.Customer); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomer provides a mock function with given fields: _a0
func (_m *Coinage) DeleteCustomer(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePlan provides a mock function with given fields: _a0, _a1
func (_m *Coinage) DeletePlan(_a0 uuid.UUID, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoaster provides a mock function with given fields: _a0
func (_m *Coinage) DeleteRoaster(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscription provides a mock function with given fields: _a0, _a1
func (_m *Coinage) DeleteSubscription(_a0 uuid.UUID, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCustomer provides a mock function with given fields: _a0
func (_m *Coinage) NewCustomer(_a0 *models.CustomerRequest) (*models.Customer, error) {
	ret := _m.Called(_a0)

	var r0 *models.Customer
	if rf, ok := ret.Get(0).(func(*models.CustomerRequest) *models.Customer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.CustomerRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPlan provides a mock function with given fields: _a0, _a1
func (_m *Coinage) NewPlan(_a0 uuid.UUID, _a1 *models.PlanRequest) (*models.Plan, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Plan
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.PlanRequest) *models.Plan); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Plan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, *models.PlanRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRoaster provides a mock function with given fields: _a0
func (_m *Coinage) NewRoaster(_a0 *models.RoasterRequest) (*models.Roaster, error) {
	ret := _m.Called(_a0)

	var r0 *models.Roaster
	if rf, ok := ret.Get(0).(func(*models.RoasterRequest) *models.Roaster); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Roaster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.RoasterRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSource provides a mock function with given fields: _a0, _a1
func (_m *Coinage) NewSource(_a0 uuid.UUID, _a1 *models.CustomerRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.CustomerRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscription provides a mock function with given fields: _a0, _a1
func (_m *Coinage) NewSubscription(_a0 uuid.UUID, _a1 *models.SubscribeRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.SubscribeRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Plan provides a mock function with given fields: _a0, _a1
func (_m *Coinage) Plan(_a0 uuid.UUID, _a1 uuid.UUID) (*models.Plan, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Plan
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *models.Plan); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Plan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Plans provides a mock function with given fields: _a0
func (_m *Coinage) Plans(_a0 uuid.UUID) ([]*models.Plan, error) {
	ret := _m.Called(_a0)

	var r0 []*models.Plan
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*models.Plan); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Plan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Roaster provides a mock function with given fields: _a0
func (_m *Coinage) Roaster(_a0 uuid.UUID) (*models.Roaster, error) {
	ret := _m.Called(_a0)

	var r0 *models.Roaster
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Roaster); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Roaster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ gateways.Coinage = (*Coinage)(nil)
